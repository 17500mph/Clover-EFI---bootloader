#!/bin/bash

echo "==============================================="
echo "Post Post-Install Script"
echo "==============================================="

#echo "DEBUG: $ 1 = Full path to the installation package the installer app is processing: " $1
#echo "DEBUG: $ 2 = Full path to the installation destination: " $2
#echo "DEBUG: $ 3 = Installation volume (mountpoint) to receive the payload: " $3
#echo "DEBUG: $ 4 = Root directory for the system: " $4

echo "preinstall: Path to installer....... $1"
echo "preinstall: Path to destination..... $2"
echo "preinstall: Path to dest volume..... $3"
echo "preinstall: Root of system folder... $4"

#############################################################################

osxvolume="${3}"
bootervolumename="EFI"
bootvolume="/Volumes/${bootervolumename}"
install_log="${osxvolume}/Clover_Install_Log.txt"
config_plist_file="${osxvolume}"/EFI/config.plist

# ---------------------------------------------
# 檢查 原來的 boot 類型 並安裝新的 boot
# 檢查 非 GPT EFI 分區
# ---------------------------------------------

file "${osxvolume}/bootold" > "${osxvolume}/bootoldtype"
boottypeversion=$( grep "boot" "${osxvolume}/bootoldtype" | awk '{ print $2 }' | tr -d '}' )
echo "${boottypeversion}" >> "${osxvolume}/bootoldtype"
#echo "The original boot type = ${boottypeversion}" >> "$install_log"
if [[ "${boottypeversion}" == "data" ]]; then
    cp -f "${osxvolume}/bootold" "${osxvolume}/boot1"
    echo "cp -f ${osxvolume}/bootold ${osxvolume}/boot1" >> "$install_log"
    chflags hidden "${osxvolume}/boot1"
fi
rm -f "${osxvolume}/bootold"
rm -f "${osxvolume}/bootoldtype"

# ---------------------------------------------
# 檢查 原來的 boot 類型 並安裝新的 boot
# 檢查 GPT EFI 分區
# ---------------------------------------------

installtype=$( cat "${osxvolume}/boot0type" )

if [ "$( df | grep EFI )" ] && [ "${installtype}" == "boot0hfsEFI" ]; then
	config_plist_file="${bootvolume}"/EFI/config.plist
    backupRootDir="${bootvolume}/EFI-Backups"
    backupDir="${backupRootDir}/"$( date -j "+%F-%Hh%M" )
    # Create the backup dirextory
    mkdir -p "${backupDir}"
    # Backup stage2
    if [[ -f "${bootvolume}/boot" ]];then
        cp -p "${bootvolume}/boot" "${backupDir}/boot"
        echo "cp -p ${bootvolume}/boot ${backupDir}/boot" >> "$install_log"
    fi
    if [[ -f "${bootvolume}/boot1" ]];then
        cp -p "${bootvolume}/boot1" "${backupDir}/boot1"
        echo "cp -p ${bootvolume}/boot1 ${backupDir}/boot1" >> "$install_log"
    fi
    if [[ -f "${bootvolume}/boot3" ]];then
        cp -p "${bootvolume}/boot3" "${backupDir}/boot3"
        echo "cp -p ${bootvolume}/boot3 ${backupDir}/boot3" >> "$install_log"
    fi
    if [[ -f "${bootvolume}/boot6" ]];then
        cp -p "${bootvolume}/boot6" "${backupDir}/boot6"
        echo "cp -p ${bootvolume}/boot6 ${backupDir}/boot6" >> "$install_log"
    fi

    # Backup /EFI directory
    if [[ -d "${bootvolume}/EFI" ]];then
        sudo cp -pR "${bootvolume}/EFI" "${backupDir}/EFI"
        echo "cp -pR ${bootvolume}/EFI ${backupDir}/EFI" >> "$install_log"
    fi
    find "${backupRootDir}" -type d -depth 1 -empty -exec rmdir {} \; # Remove empty directories
    rm -df "${backupRootDir}"


    cp -f "${bootvolume}/boot" "${bootvolume}/bootold"
    cp -f "${osxvolume}/boot" "${bootvolume}/boot"
    cp -f "${osxvolume}/boot3" "${bootvolume}/boot3"
    cp -f "${osxvolume}/boot6" "${bootvolume}/boot6"
#   chflags hidden "${bootvolume}/boot"
#   chflags hidden "${bootvolume}/boot3"
#   chflags hidden "${bootvolume}/boot6"

    echo "cp -f ${osxvolume}/boot ${bootvolume}/boot" >> "$install_log"
    echo "cp -f ${osxvolume}/boot3 ${bootvolume}/boot3" >> "$install_log"
    echo "cp -f ${osxvolume}/boot6 ${bootvolume}/boot6" >> "$install_log"

    file "${bootvolume}/bootold" > "${bootvolume}/bootoldtype"
    boottypeversion=$( grep "boot" "${bootvolume}/bootoldtype" | awk '{ print $2 }' | tr -d '}' )
    echo "${boottypeversion}" >> "${bootvolume}/bootoldtype"
    if [ "${boottypeversion}" == "data" ]; then
        cp -f "${bootvolume}/bootold" "${bootvolume}/boot1"
        chflags hidden "${bootvolume}/boot1"
    fi
    rm "${bootvolume}/bootold"
    rm "${bootvolume}/bootoldtype"

    if [ ! -e "${bootvolume}/boot1" ]; then
        cp -f "${osxvolume}/boot1" "${bootvolume}/boot1"
        echo "cp -f ${osxvolume}/boot1 ${bootvolume}/boot1" >> "$install_log"
    fi

    if [ -e "${bootvolume}/EFI/config.plist" ]; then
        cp -f "${bootvolume}/EFI/config.plist" "${bootvolume}/EFI/config-oldEFI.plist"
    fi
    cp -Rf "${osxvolume}/EFI/" "${bootvolume}/EFI/"
    if [ -e "${bootvolume}/EFI/config-oldEFI.plist" ]; then
        cp -f "${bootvolume}/EFI/config-oldEFI.plist" "${bootvolume}/EFI/config.plist"
        rm "${bootvolume}/EFI/config-oldEFI.plist"
    fi

    if [ -e "${bootvolume}/EFI/EFI_Install_Log.txt" ]; then
        rm -f "${bootvolume}/EFI/EFI_Install_Log.txt"
    fi

    touch "${bootvolume}/.metadata_never_index"
    rm -Rf "${bootvolume}/.fseventsd/"
    mkdir -p "${bootvolume}/.fseventsd"
    touch "${bootvolume}/.fseventsd/no_log"
fi

# Change config.plist if needed
boottype=$( cat "${osxvolume}/boottype" )

case "${boottype}" in
	ia32) perl -i -p -e "s/arch=x86_64/arch=i386/g" "${config_plist_file}" ;;
	 x64) perl -i -p -e "s/arch=i386/arch=x86_64/g" "${config_plist_file}" ;;
esac


echo "" >> "${install_log}"
echo "======================================================" >> "${install_log}"
echo "=========== Clover EFI Installation Finish ===========" >> "${install_log}"
echo "======================================================" >> "${install_log}"
# ---------------------------------------------
# Cleanup
# ---------------------------------------------

if [[ -e "${bootvolume}/EFI" ]]; then
    cp -f "$install_log" "${bootvolume}/EFI/Clover_Install_Log.txt"
fi
if [[ -e "$install_log" ]]; then
    mv -f "$install_log" "${osxvolume}/EFI/Clover_Install_Log.txt"
fi
if [[ -e "${osxvolume}/EFI/EFI_Install_Log.txt" ]]; then
    rm -f "${osxvolume}/EFI/EFI_Install_Log.txt"
fi
rm -f "${osxvolume}/boot0type"
rm -f "${osxvolume}/boottype"
rm -f "${osxvolume}/formattype"
