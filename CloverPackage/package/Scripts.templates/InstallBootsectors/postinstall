#!/bin/bash

diskloader="@MBR_SECTOR_FILE@"

DEST_VOL="${3}"
EFI_ROOT_DIR=$(cd "${DEST_VOL}"/EFIROOTDIR; pwd -P)
CLOVER_INSTALLER_PLIST_NEW="${DEST_VOL}@CLOVER_INSTALLER_PLIST_NEW@"
install_log="${DEST_VOL}/Clover_Install_Log.txt"
plistbuddy='/usr/libexec/PlistBuddy'
installer_choice="@INSTALLER_CHOICE@"
installer_altboot_refid='@INSTALLER_ALTBOOT_REFID@'

bootvolume="$EFI_ROOT_DIR"
echo "Boot Volume is $bootvolume"

if [ -z "${bootvolume}" ]; then
    echo
    echo "Cannot find the volume. Exiting."
    echo
    exit
fi

bootdev=$(LC_ALL=C diskutil info "$bootvolume" 2>/dev/null | \
 sed -n 's/.*Device Node: *//p')
bootrdev=${bootdev/disk/rdisk}

if [ "${bootdev}" = "${bootdev#*disk*s}" ]; then
    echo
    echo "ERROR Volume does not use slices."
    echo
    exit
fi

bootdisk=${bootdev%s*}
bootrdisk=${bootdisk/disk/rdisk}
bootslice=${bootdev#*disk*s}

# Get the options for alternative booting
altBoot=$($plistbuddy -c "Print $installer_altboot_refid" \
 "$CLOVER_INSTALLER_PLIST_NEW" 2>/dev/null)
if [[ "$altBoot" == true ]]; then
    partitionloaderhfs="boot1h2"
    partitionloaderfat="boot1f32alt"
else
    partitionloaderhfs="boot1h"
    partitionloaderfat="boot1f32"
fi

echo "==============================================="
echo "Installer Variables:"
echo "********************"
echo "bootvolume: Volume is ${bootvolume}"
echo "bootdev: Volume device is ${bootdev}"
echo "bootrdev: Volume raw device is ${bootrdev}"
echo "bootslice: Volume slice is ${bootslice}"
echo "bootdisk: Disk device is ${bootdisk}"
echo "bootrdisk: Disk raw device is ${bootrdisk}"
echo "diskloader: Disk loader is ${diskloader}"
echo "partitionloaderhfs: Partition loader is ${partitionloaderhfs}"
echo "partitionloaderfat: Partition loader is ${partitionloaderfat}"
echo "-----------------------------------------------"
echo ""
echo ""

# Installing fdisk440 in /usr/local/bin if not exists
if [ ! -e "/usr/local/bin/fdisk440" ]; then
    mkdir -p /usr/local/bin
    cp -f "${DEST_VOL}/usr/local/bin/fdisk440" /usr/local/bin/fdisk440
fi

echo "==============================================="
echo "Check partition scheme"
echo "==============================================="
bootdisk_partition_scheme=$(LC_ALL=C diskutil info "$bootdisk" 2>/dev/null | \
 sed -n 's/.*Content (IOContent): *//p')

case "$bootdisk_partition_scheme" in
    FDisk_partition_scheme)
        echo "${bootdev} use MBR partition scheme"
        bootdisk_partition_scheme="mbr"
        ;;
    GUID_partition_scheme)
        echo "${bootdev} use GPT/Hybrid GPT partition scheme"
        bootdisk_partition_scheme="gpt"
        ;;
     *) echo "ERROR: $bootdev use an unsupported partition scheme: $bootdisk_partition_scheme"
        echo "ERROR: $bootdev use an unsupported partition scheme: $bootdisk_partition_scheme" >> "$install_log"
        exit 1
        ;;
esac
echo ""

echo "==============================================="
echo "Check the format of the selected partition"
echo "==============================================="

boot_volume_format="$(fstyp $bootdev)"
case "$boot_volume_format" in
      hfs) echo "${bootdev} is currently formatted as HFS"   ;;
    msdos) echo "${bootdev} is currently formatted as msdos" ;;
esac
echo ""

echo "======================================================" >> "$install_log"
echo "Installing BootSectors/BootLoader" >> "$install_log"
echo "" >> "$install_log"
partitionactive=$( /usr/local/bin/fdisk440 -d ${bootrdisk} | grep -n "*" | awk -F: '{print $1}')
if [[ -n "$partitionactive" ]]; then
    echo "Current Active Partition: ${partitionactive}" >> "$install_log"
else
    echo "No Active Partition" >> "$install_log"
fi
echo "" >> "$install_log"

### Stage 0 ###
echo "Stage 0 - Writting ${diskloader} to ${bootdisk}" >> "$install_log"
echo "/usr/local/bin/fdisk440 -u -f ${DEST_VOL}/usr/standalone/i386/${diskloader} -y ${bootdisk}" >> "$install_log"
/usr/local/bin/fdisk440 -u -f "${DEST_VOL}/usr/standalone/i386/${diskloader}" -y ${bootdisk}
echo "" >> "$install_log"

### Stage 1 ###
if [[ ${boot_volume_format} = "hfs" ]]; then
    echo "Stage 1 - Writting ${partitionloaderhfs} to ${bootrdev}" >> "$install_log"
    echo "File system is HFS." >> "$install_log"
    echo "dd if=${DEST_VOL}/usr/standalone/i386/${partitionloaderhfs} of=${bootrdev}" >> "$install_log"
    dd if="${DEST_VOL}/usr/standalone/i386/${partitionloaderhfs}" of=${bootrdev}

elif [[ ${boot_volume_format} = "msdos" ]]; then
    echo "Stage 1 - Writting ${partitionloaderfat} to ${bootrdev}" >> "$install_log"
    echo "File system is Fat32." >> "$install_log"

    # copy partition boot sector to origbs
    echo "dd if=${bootrdev} count=1 bs=512 of=/tmp/origbs" >> "$install_log"
    dd if=${bootrdev} count=1 bs=512 of=/tmp/origbs

    # copy boot1f32 to newbs
    echo "cp ${DEST_VOL}/usr/standalone/i386/${partitionloaderfat} /tmp/newbs" >> "$install_log"
    cp -f "${DEST_VOL}/usr/standalone/i386/${partitionloaderfat}" /tmp/newbs

    # "merge" origbs into newbs
    echo "dd if=/tmp/origbs of=/tmp/newbs skip=3 seek=3 bs=1 count=87 conv=notrunc" >> "$install_log"
    dd if=/tmp/origbs of=/tmp/newbs skip=3 seek=3 bs=1 count=87 conv=notrunc

    # write newbs to the partition boot sector
    echo "dd if=/tmp/newbs of=${bootrdev}" >> "$install_log"
    dd if=/tmp/newbs of=${bootrdev}

else
    echo "Unknown boot volume format: $boot_volume_format" >> "$install_log"
    echo "No Stage1 was written" >> "$install_log"
fi

echo "" >> "$install_log"

if [[ "$bootdisk_partition_scheme" == mbr && "$diskloader" == boot0af ]]; then
    echo "Setup Active Partition to be: ${bootslice}" >> "$install_log"
    "/usr/local/bin/fdisk440" -e ${bootrdisk} <<-MAKEACTIVE
print
flag ${bootslice}
write
y
quit
MAKEACTIVE

    partitionactive=$( /usr/local/bin/fdisk440 -d ${bootrdisk} | grep -n "*" | awk -F: '{print $1}')
    echo "New Active Partition: ${partitionactive}" >> "$install_log"
    echo "" >> "$install_log"
fi

# Mark that the option was selected
$plistbuddy -c "Add $installer_choice bool true" "$CLOVER_INSTALLER_PLIST_NEW" >/dev/null

# Clean Up
rm -f /tmp/origbs /tmp/newbs

exit
