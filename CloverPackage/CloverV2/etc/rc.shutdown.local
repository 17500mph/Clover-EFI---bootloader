#!/bin/bash

#
# rc.shutdown.local shutdown script for CLOVER
#
# Initial - Slice
# Edited - kozlek 2013-01-15
# Edited  - apianti 2013-01-16
#         - JrCs    2013-02-01
#
# (c) Slice 2010
# (c) kozlek,apianti 2013
# (c) JrCs 2013

#
# Manage nvram.plist: try to store it in the first boot helper partition
# or in the root directory
#

DEBUG=0

logLocation=/Library/Logs/CloverEFI
NVRAMFilename=nvram.plist
NVRAMMountPoint=/tmp/NVRAM
NVRAMDevice=
NVRAMPartType=

bootFlags=$(nvram -p | sed -n 's/^boot-args *//p')

if [[ "$DEBUG" -ne 0 ]]; then
  exec &>"${logLocation}"/rc.shutdown.log
  set -x
fi

# Turn on a case-insensitive matching
shopt -s nocasematch

set -u # Check that all variable are bound

# Catch signal to clean up
trap 'rmdir "${NVRAMMountPoint}" &>/dev/null' EXIT

function findFirstAppleBootDevice {
    local devices=$(LC_ALL=C ls /dev/disk* | sed -n '/\/dev\/disk[0-9]*$/p')
    # Iterate over all devices
    for device in $devices; do
        # Find first partition with Apple Boot partition signature
        index=$(LC_ALL=C /usr/sbin/gpt -r show "$device" 2>/dev/null | \
         awk 'toupper($7) == "426F6F74-0000-11AA-AA11-00306543ECAC" {print $3; exit}')
        if [[ $index =~ ^[0-9]+$ ]];then
            break
        else
            index=
        fi
    done
    # If index found return the device and partition (like diskXsY)
    [[ -n "$index" ]] && echo "${device##*/}s$index"
}

function mountNVRAMDisk {
    local device="$1"
    local mntpt="$2"

    # Check if the device is not already mount
    while read -r dev mnt; do
        if [[ "$dev" == "$device" ]]; then
            echo "$mnt" # Return the mount point
            return 0
        fi
    done < <(df -l | sed -n 's/^\/dev\/\(disk[^ ]*\)[^/]*\(\/.*$\)/\1 \2/p')

    #
    # Make sure mount point exists
    #
    [[ ! -d "$mntpt" ]] && mkdir -p "$mntpt"
    [[ ! -d "$mntpt" ]] && return 1

    #
    # Unmount the mount point and device first just in case
    #
    umount "$mntpt"       2>/dev/null
    umount "/dev/$device" 2>/dev/null
    for fstype in hfs msdos; do
        mount -t $fstype /dev/$device "$mntpt" &>/dev/null
        [[ $? -eq 0 ]] && echo "$mntpt" && return 0
    done

    return 1
}

function mountAndSaveNVRAM {
    local device="$1"

    # Mount the NVRamDisk device
    local mntpt=$(mountNVRAMDisk "$device" "$NVRAMMountPoint")

    if [[ -n "$mntpt" ]]; then
        #
        # Write NVRAM and make sure it exists
        #
        nvram -x -p > "${mntpt}/${NVRAMFilename}"
        if [[ -f "${mntpt}/${NVRAMFilename}" ]]; then
            chflags hidden "${mntpt}/${NVRAMFilename}"
            umount "$NVRAMMountPoint" &>/dev/null
            echo "NVRAM saved to /${NVRAMFilename} on $device"
            return 0
        fi
        umount "$NVRAMMountPoint" &>/dev/null
    fi
    echo "NVRAM couldn't be saved to /${NVRAMFilename} on $device !"
    return 1
}

function saveNVRAM {
    local rootDevice=$(df -l / | sed -n 's/^\/dev\/\([^ ]*\).*/\1/p')

    # If NVRAMDevice is not specify use rootDevice
    NVRAMDevice=${NVRAMDevice:-$rootDevice}

    # Normalize NVRAMDevice (keep only the device name (remove /dev/)
    NVRAMDevice=${NVRAMDevice##*/}

    if [[ ! "$NVRAMDevice" =~ ^disk[0-9]*s[0-9]*$ ]]; then
        # NVRAMDevice is a whole disk certainly a RAID device
        # try to save nvram.plist on the first Apple Boot Partition

        local AppleBootDevice=$(findFirstAppleBootDevice)

        if [[ -n "$AppleBootDevice" ]]; then
            # Try to save nvram.plist on the Apple Boot device
            mountAndSaveNVRAM "$AppleBootDevice"
            [[ $? -eq 0 ]] && return
        fi
    fi

    # Save NVRAM to specific device or root
    mountAndSaveNVRAM "$NVRAMDevice"
    [[ $? -ne 0 ]] && mountAndSaveNVRAM "$rootDevice"
}

#
# Parse boot flags
#
for bootFlag in ${bootFlags} ; do
   #
   # Split the key and value
   #  bootFlagKey will be the key of the boot flag
   #  bootFlagValue will be the flag value
   #
   bootFlagKey=${bootFlag%%=*}
   bootFlagValue=
   [[ $bootFlag == *=* ]] && bootFlagValue=${bootFlag#*=}

   # All match are case insensitive
   case "$bootFlagKey" in
       NVRamDisk) # NVRamDisk=No|diskXsY
                  NVRAMDevice="$bootFlagValue" ;;
   esac
done

EFIFirmwareVendor=$(LC_ALL=C ioreg -l -pIODeviceTree | \
 sed -n 's/.*firmware-vendor.*<\([0-9a-fA-F]*\)>.*/\1/p' | xxd -r -p)

# Only save nvram to disk if boot from CloverEFI
[[ "$NVRAMDevice" != No && "$EFIFirmwareVendor" == CLOVER ]] && saveNVRAM
